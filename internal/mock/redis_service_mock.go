// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/chantapat.t/GolandProjects/mini-redis-go/internal/service/server/core/redis_service.go

// Package mock_core is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRedisService is a mock of RedisService interface.
type MockRedisService struct {
	ctrl     *gomock.Controller
	recorder *MockRedisServiceMockRecorder
}

// MockRedisServiceMockRecorder is the mock recorder for MockRedisService.
type MockRedisServiceMockRecorder struct {
	mock *MockRedisService
}

// NewMockRedisService creates a new mock instance.
func NewMockRedisService(ctrl *gomock.Controller) *MockRedisService {
	mock := &MockRedisService{ctrl: ctrl}
	mock.recorder = &MockRedisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisService) EXPECT() *MockRedisServiceMockRecorder {
	return m.recorder
}

// ExistsByKey mocks base method.
func (m *MockRedisService) ExistsByKey(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByKey", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsByKey indicates an expected call of ExistsByKey.
func (mr *MockRedisServiceMockRecorder) ExistsByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByKey", reflect.TypeOf((*MockRedisService)(nil).ExistsByKey), key)
}

// Get mocks base method.
func (m *MockRedisService) Get(key string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRedisServiceMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisService)(nil).Get), key)
}

// ReadCache mocks base method.
func (m *MockRedisService) ReadCache(cacheFolder string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadCache", cacheFolder)
}

// ReadCache indicates an expected call of ReadCache.
func (mr *MockRedisServiceMockRecorder) ReadCache(cacheFolder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCache", reflect.TypeOf((*MockRedisService)(nil).ReadCache), cacheFolder)
}

// Set mocks base method.
func (m *MockRedisService) Set(key string, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockRedisServiceMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisService)(nil).Set), key, value)
}

// WriteCache mocks base method.
func (m *MockRedisService) WriteCache(cacheFolder, k string, v []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCache", cacheFolder, k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCache indicates an expected call of WriteCache.
func (mr *MockRedisServiceMockRecorder) WriteCache(cacheFolder, k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCache", reflect.TypeOf((*MockRedisService)(nil).WriteCache), cacheFolder, k, v)
}
